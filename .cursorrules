# Raycast GemAI - Устаревшие правила (DEPRECATED - Используй .cursor/rules/*.mdc)

⚠️ **УСТАРЕЛО**: Этот файл `.cursorrules` устарел. 
✅ **ИСПОЛЬЗУЙ ВМЕСТО ЭТОГО**: Современные файлы `.cursor/rules/*.mdc` для лучшей организации и эффективности токенов.

## Краткий справочник по современным правилам

Новая система правил обеспечивает лучшую организацию и контекстно-зависимую активацию:

- **001-workspace.mdc**: Основная архитектура проекта и универсальная система провайдеров
- **002-cursor-rules.mdc**: Как работают .mdc файлы и лучшие практики  
- **100-typescript-raycast.mdc**: Стандарты разработки TypeScript и Raycast
- **200-ai-provider-patterns.mdc**: Паттерны реализации AI провайдеров
- **201-models-pricing.mdc**: Определения моделей и управление ценами
- **202-debugging-troubleshooting.mdc**: Стратегии отладки и распространенные проблемы
- **203-screenshot-vision.mdc**: Обработка скриншотов и интеграция vision API

## Критичные моменты (совместимость с устаревшими версиями)

### Универсальная система провайдеров
- Используй `buildAIConfig()` вместо `buildGemAIConfig()` для нового кода
- `AIConfig` - универсальный интерфейс, `GemAIConfig` для обратной совместимости
- Автоопределение провайдера на основе выбранной модели
- Паттерн фабрики: `createAIProvider(config)` возвращает подходящий провайдер

### Reasoning модели (o1-серия)
- НИКОГДА не отправляй system prompts как отдельные сообщения в o1-preview/o1-mini
- ВСЕГДА включай system prompt в user message для reasoning моделей
- Используй `max_completion_tokens` вместо `max_tokens` для o1-серии
- Фиксированная температура = 1 для reasoning моделей (требование OpenAI)

### Vision API автопереключение  
- Reasoning модели не поддерживают vision - автопереключение на GPT-4o при обнаружении изображения
- Показывай пользователю уведомление об автопереключении модели
- Сохраняй исходные настройки конфига при переключении

### Отладочное логирование
- Продакшен: Все отладочные `console.log()` должны быть закомментированы
- Сохраняй обработку ошибок: `console.error()` для настоящих ошибок должны остаться
- Формат комментариев: Используй `// console.log(...)` для сохранения отладочного кода

**Это продакшен расширение Raycast используемое реальными пользователями. Приоритет - стабильность, четкая обратная связь с пользователем, и плавная работа всех поддерживаемых AI моделей.** 