---
description: 
globs: 
alwaysApply: false
---
# TypeScript & Raycast Development Standards

## üö´ Git Commit Policy (–ö–†–ò–¢–ò–ß–ù–û)
- **–ö–æ–º–º–∏—Ç—ã –¥–µ–ª–∞—Ç—å –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ø–í–ù–û –ø–æ–ø—Ä–æ—Å–∏–ª**
- **–ù–ò–ö–û–ì–î–ê –Ω–µ –¥–µ–ª–∞—Ç—å –∫–æ–º–º–∏—Ç—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ**
- **–¢–µ–∫—Å—Ç—ã –∫–æ–º–º–∏—Ç–æ–≤ –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ**
- –§–æ—Ä–º–∞—Ç: `—Ç–∏–ø: –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º`

## TypeScript Guidelines
- **Use strict TypeScript** - enable all strict mode flags
- **Prefer interfaces over types** for object shapes
- **Use literal types** for model names, provider types: `'gemini' | 'openai'`
- **Avoid `any`** - use `unknown` or proper type guards
- **Generic constraints** for provider-agnostic functions

## Interface Design Patterns
```typescript
// ‚úÖ Universal interface with provider extensions
interface AIConfig {
  provider: 'gemini' | 'openai';
  model: { /* universal fields */ };
}

// ‚úÖ Backward compatibility through extension
interface GemAIConfig extends AIConfig {
  provider: 'gemini';
  // provider-specific required fields
}
```

## Raycast Integration Standards
- **Export default function** for each command
- **Use RaycastProps type** for prop typing
- **Handle launchContext** for screenshot integration
- **Consistent UI patterns** across commands

## Command Structure Template
```typescript
export default function MyCommand(props: RaycastProps) {
  const aiConfig = buildAIConfig(getCmd(CMD_MY_COMMAND).id, props, fallbackPrompt);
  aiConfig.ui.placeholder = "Custom placeholder...";
  return GemAI(aiConfig);
}
```

## Error Handling
- **Specific error types**: `AIProviderError`, not generic `Error`
- **User-friendly messages**: Clear explanations for API failures
- **Graceful degradation**: Handle missing keys, rate limits, network issues
- **Toast notifications**: Appropriate styles (Success/Failure/Animated)

## Async Patterns
- **Use async/await** consistently
- **Provider factory pattern**: `createAIProvider(config)`
- **Streaming responses**: Proper AsyncGenerator handling
- **Context propagation**: Maintain config through async chains

## File Organization
- Keep logic decoupled from Raycast-specific code
- Universal provider functions work with both Gemini and OpenAI
- Clear parameter typing for model configurations
- Return type annotations for complex functions
