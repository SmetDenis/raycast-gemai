---
description:
globs:
alwaysApply: false
---
# Стратегии отладки и устранение неполадок

## Политика отладочного логирования - ПРОДАКШЕН СТАНДАРТЫ
- **Продакшен**: Все отладочные `console.log()` должны быть закомментированы
- **Сохраняй обработку ошибок**: `console.error()` для настоящих ошибок должны остаться
- Формат комментариев: `// console.log(...)` для сохранения отладочного кода
- **НИКОГДА** не удаляй отладочный код - только комментируй

## Паттерны логирования ошибок
```typescript
// ✅ Правильное логирование ошибок
try {
  const result = await provider.method();
} catch (error: any) {
  console.error('[ComponentName] Operation failed:', error.message);
  console.error('[ComponentName] Full error:', error);
  // console.log('[ComponentName] Debug info:', debugData);
}
```

## Типичные проблемы и решения

### API ошибки провайдеров
- **400 Bad Request / Unsupported MIME**: Читай файлы как текст вместо API upload
- **Rate limiting**: Реализуй exponential backoff
- **Invalid model**: Проверяй model definitions в `@models.ts`

### Проблемы конфигурации
- **Undefined preferences**: Добавляй fallback значения в `@configUtils.ts`
- **Missing API keys**: Четкие сообщения пользователю через toast
- **Provider detection**: Логируй выбранный провайдер в `@buildAIConfig.ts`

### UI проблемы
- **Loading states**: Правильные isLoading флаги
- **Error boundaries**: Обрабатывай useEffect ошибки
- **Toast notifications**: Подходящие стили (Success/Failure/Animated)

## Измерение производительности
- **Время первого ответа**: От начала запроса до первого чанка контента
- **НИКОГДА** не измеряй время до начала стриминга - это инициализация
- Общее время: полная продолжительность стриминга + финальная обработка

## Отладочные флаги
- Используй условные логи: `if (DEBUG) console.log(...)`
- Группируй связанные логи: `console.group('[Provider]')`
- Логируй состояние на каждом этапе пайплайна

## Критично для продакшена
**Это продакшен расширение Raycast. Приоритет: стабильность + UX.**
- Все отладочные выводы закомментированы
- Ошибки обрабатываются gracefully с понятными сообщениями пользователю
- Логи помогают диагностике без захламления консоли
