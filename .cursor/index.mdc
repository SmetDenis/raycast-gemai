---
description: Core project rules for raycast-gemai - universal AI assistant for Raycast
globs:
alwaysApply: true
---

# raycast-gemai Project Rules

## Project Overview
- **Name**: raycast-gemai - Universal AI Assistant for Raycast
- **Purpose**: Raycast extension providing AI toolbox with Gemini & OpenAI support
- **Architecture**: Universal provider abstraction with 18+ specialized commands
- **Tech Stack**: TypeScript, React, Raycast API, Google Gemini API, OpenAI API

## Core Development Principles

### üìù Code Quality Standards
- **Strict TypeScript**: Use strict mode, explicit types, no `any` types
- **Functional Approach**: Prefer pure functions over classes (except AI provider implementations)
- **Immutability**: Never modify input parameters, return new objects
- **Error Handling**: Always handle errors gracefully with user-friendly toasts
- **Backward Compatibility**: Maintain compatibility for existing configurations

### üîß Project-Specific Rules
- **Universal Provider Support**: Code must work with both Gemini and OpenAI providers
- **Model Agnostic**: All features should adapt to different AI model capabilities
- **Token Optimization**: Always consider token usage and cost implications
- **Raycast Standards**: Follow Raycast extension best practices and UI patterns
- **BYOK Philosophy**: Support user's own API keys, no vendor lock-in

### üö´ Development Restrictions
- **NO npm commands**: Never suggest running `npm run dev` or `npm run build`
- **Suggest only**: When build is needed, suggest the commands but don't execute
- **Code-first**: Focus on code changes, not environment setup

### üèóÔ∏è Architecture Patterns
- **Core Separation**: Keep business logic in `src/core/` directory
- **Command Structure**: Each command follows the same pattern with AIConfig
- **Provider Abstraction**: Use `AIProvider` interface for vendor implementations
- **Configuration Builder**: Use `buildAIConfig()` for consistent setup
- **Stats Tracking**: Always track RequestStats for analytics

### üìä Analytics & Monitoring
- **Request Tracking**: Every AI request must record tokens, cost, and timing
- **User Analytics**: Provide detailed usage statistics and cost breakdowns
- **Performance Monitoring**: Track response times and token efficiency
- **History Management**: Maintain searchable conversation history

### üéØ Command Development
- **Consistent Interface**: All commands use GemAI component or ChatRoom
- **Preference Support**: Support model selection, temperature, custom prompts
- **File Attachments**: Handle image/file uploads where applicable
- **Fallback Handling**: Graceful degradation when services are unavailable

### üåê Multi-Language Support
- **Primary/Secondary Languages**: Support user's language preferences
- **Translation Features**: Provide bidirectional translation capabilities
- **Locale-Aware Formatting**: Format dates, numbers according to user locale

### üîÑ State Management
- **Local Storage**: Use Raycast's storage APIs for persistence
- **Message History**: Implement chat context with configurable message limits
- **Preferences Sync**: Synchronize user preferences across commands
- **Cache Strategy**: Implement intelligent caching for API responses

## File Organization Standards
- **Commands**: Individual command files in `src/` root
- **Core Logic**: Shared functionality in `src/core/`
- **Types**: Centralized type definitions in `src/core/types.ts`
- **Utils**: Helper functions in `src/core/utils.ts`
- **Models**: AI model configurations in `src/core/models.ts`

## Quality Assurance
- **Type Safety**: Every function must have explicit return types
- **Error Boundaries**: Catch and handle all possible error scenarios
- **Toast Notifications**: Provide clear feedback for all user actions
- **Performance**: Optimize for fast response times and minimal token usage
- **Accessibility**: Follow Raycast accessibility guidelines
