---
description: –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ UX –≤ Raycast —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è—Ö. –ü–æ–∫—Ä—ã–≤–∞—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏, –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
globs: 
alwaysApply: true
---
# UI Components and UX Patterns

## React Component Structure

### Functional Components
```typescript
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
interface GemAIProps {
  initialInput?: string;
  model: string;
  onResponse?: (response: string) => void;
}

export default function GemAI({ initialInput, model, onResponse }: GemAIProps) {
  // Hooks
  const [state, setState] = useState<ComponentState>();
  const preferences = getPreferenceValues<Preferences>();
  
  // Event handlers
  const handleSubmit = useCallback(async (input: string) => {
    // Implementation
  }, [model]);
  
  // Effects
  useEffect(() => {
    if (initialInput) {
      handleSubmit(initialInput);
    }
  }, [initialInput, handleSubmit]);
  
  // Render
  return (
    <Detail
      isLoading={state?.isLoading}
      markdown={state?.response || ""}
      actions={<ActionPanel>{/* Actions */}</ActionPanel>}
    />
  );
}
```

### Component Naming
```typescript
// ‚úÖ –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export default function AIResponseViewer() {}
export default function TokenCountDisplay() {}
export default function ModelSelector() {}

// ‚ùå –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –∏–º–µ–Ω–∞
export default function Component() {}
export default function Handler() {}
```

## State Management Patterns

### Local State
```typescript
// ‚úÖ –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
interface AIState {
  isLoading: boolean;
  response: string | null;
  error: string | null;
  usage: TokenUsage | null;
}

const [aiState, setAIState] = useState<AIState>({
  isLoading: false,
  response: null,
  error: null,
  usage: null
});

// ‚úÖ Atomic updates
setAIState(prev => ({ ...prev, isLoading: true, error: null }));
```

### Effect Management
```typescript
// ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
useEffect(() => {
  let cancelled = false;
  
  async function processRequest() {
    if (cancelled) return;
    
    try {
      const result = await aiProvider.process(input);
      if (!cancelled) {
        setAIState(prev => ({ 
          ...prev, 
          isLoading: false, 
          response: result.content 
        }));
      }
    } catch (error) {
      if (!cancelled) {
        setAIState(prev => ({ 
          ...prev, 
          isLoading: false, 
          error: error.message 
        }));
      }
    }
  }
  
  if (input) {
    processRequest();
  }
  
  return () => { cancelled = true; };
}, [input, aiProvider]);
```

## Raycast UI Patterns

### Detail Component Patterns
```typescript
// ‚úÖ –ë–æ–≥–∞—Ç—ã–π Detail —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
<Detail
  isLoading={isLoading}
  markdown={response}
  metadata={
    <Detail.Metadata>
      <Detail.Metadata.Label title="Model" text={config.model} />
      <Detail.Metadata.Label title="Tokens" text={`${usage?.totalTokens || 0}`} />
      <Detail.Metadata.Label title="Cost" text={`$${usage?.cost.toFixed(4) || '0.0000'}`} />
      <Detail.Metadata.Separator />
      <Detail.Metadata.Label title="Provider" text={config.provider} />
    </Detail.Metadata>
  }
  actions={
    <ActionPanel>
      <Action.CopyToClipboard 
        title="Copy Response" 
        content={response || ""} 
        shortcut={{ modifiers: ["cmd"], key: "c" }}
      />
      <Action 
        title="Regenerate" 
        onAction={handleRegenerate}
        shortcut={{ modifiers: ["cmd"], key: "r" }}
      />
      <Action 
        title="New Chat" 
        onAction={handleNewChat}
        shortcut={{ modifiers: ["cmd"], key: "n" }}
      />
    </ActionPanel>
  }
/>
```

### Form Component Patterns
```typescript
// ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ UX —Ñ–æ—Ä–º—ã
<Form
  isLoading={isProcessing}
  actions={
    <ActionPanel>
      <Action.SubmitForm 
        title="Ask AI" 
        onSubmit={handleSubmit}
        shortcut={{ modifiers: ["cmd"], key: "return" }}
      />
      <Action 
        title="Clear" 
        onAction={handleClear}
        shortcut={{ modifiers: ["cmd"], key: "k" }}
      />
    </ActionPanel>
  }
>
  <Form.TextArea
    id="input"
    title="Your Question"
    placeholder="What would you like to know?"
    value={input}
    onChange={setInput}
    error={inputError}
  />
  
  <Form.Dropdown
    id="model"
    title="AI Model"
    value={selectedModel}
    onChange={setSelectedModel}
  >
    {models.map(model => (
      <Form.Dropdown.Item
        key={model.id}
        value={model.id}
        title={model.name}
        icon={model.provider === 'openai' ? 'ü§ñ' : 'üíé'}
      />
    ))}
  </Form.Dropdown>
  
  <Form.TextField
    id="temperature"
    title="Temperature"
    value={temperature}
    onChange={setTemperature}
    info="Higher values make output more creative"
  />
</Form>
```

### List Component Patterns
```typescript
// ‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–∏—Å–∫–∏ —Å –ø–æ–∏—Å–∫–æ–º
<List
  isLoading={isLoading}
  searchBarPlaceholder="Search conversations..."
  filtering
  actions={
    <ActionPanel>
      <Action 
        title="New Chat" 
        onAction={handleNewChat}
        shortcut={{ modifiers: ["cmd"], key: "n" }}
      />
    </ActionPanel>
  }
>
  {conversations.map(conversation => (
    <List.Item
      key={conversation.id}
      title={conversation.title}
      subtitle={conversation.preview}
      accessories={[
        { text: conversation.messageCount.toString() },
        { date: new Date(conversation.updatedAt) }
      ]}
      actions={
        <ActionPanel>
          <Action 
            title="Open Chat" 
            onAction={() => handleOpenChat(conversation.id)}
          />
          <Action 
            title="Delete" 
            onAction={() => handleDelete(conversation.id)}
            style={Action.Style.Destructive}
          />
        </ActionPanel>
      }
    />
  ))}
</List>
```

## Loading and Error States

### Loading Indicators
```typescript
// ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function LoadingDetail({ message }: { message: string }) {
  return (
    <Detail 
      isLoading={true}
      markdown={`# Processing...\n\n${message}`}
    />
  );
}

// ‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –¥–æ–ª–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
function ProcessingDetail({ progress }: { progress: number }) {
  const progressBar = '‚ñà'.repeat(Math.floor(progress / 5)) + 
                      '‚ñë'.repeat(20 - Math.floor(progress / 5));
  
  return (
    <Detail 
      isLoading={true}
      markdown={`# Processing Response\n\nProgress: ${progress}%\n\n\`${progressBar}\``}
    />
  );
}
```

### Error Handling UI
```typescript
// ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
function ErrorDetail({ error, onRetry }: { error: Error; onRetry: () => void }) {
  const errorMessage = `# Error\n\n**${error.name}**\n\n${error.message}`;
  
  return (
    <Detail
      markdown={errorMessage}
      actions={
        <ActionPanel>
          <Action 
            title="Retry" 
            onAction={onRetry}
            shortcut={{ modifiers: ["cmd"], key: "r" }}
          />
          <Action 
            title="Report Issue" 
            onAction={handleReportIssue}
          />
        </ActionPanel>
      }
    />
  );
}
```

## Toast Notifications

### Contextual Toasts
```typescript
// ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function showProcessingToast(model: string) {
  await showToast({
    style: Toast.Style.Animated,
    title: "Processing...",
    message: `Using ${model}`
  });
}

async function showSuccessToast(tokens: number, cost: number) {
  await showToast({
    style: Toast.Style.Success,
    title: "Response Generated",
    message: `${tokens} tokens ‚Ä¢ $${cost.toFixed(4)}`
  });
}

async function showErrorToast(error: Error) {
  await showToast({
    style: Toast.Style.Failure,
    title: "Error",
    message: error.message,
    primaryAction: {
      title: "Retry",
      onAction: handleRetry
    }
  });
}
```

## Accessibility and UX

### Keyboard Shortcuts
```typescript
// ‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
const shortcuts = {
  ask: { modifiers: ["cmd"], key: "return" },
  copy: { modifiers: ["cmd"], key: "c" },
  regenerate: { modifiers: ["cmd"], key: "r" },
  newChat: { modifiers: ["cmd"], key: "n" },
  clear: { modifiers: ["cmd"], key: "k" }
} as const;
```

### Semantic Structure
```typescript
// ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function formatAIResponse(content: string): string {
  return `# AI Response\n\n${content}\n\n---\n\n*Generated by ${model}*`;
}

// ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
function formatMetadata(usage: TokenUsage, model: string): Detail.Metadata.Props {
  return (
    <Detail.Metadata>
      <Detail.Metadata.Label title="Model" text={model} />
      <Detail.Metadata.Separator />
      <Detail.Metadata.Label 
        title="Input Tokens" 
        text={usage.inputTokens.toLocaleString()} 
      />
      <Detail.Metadata.Label 
        title="Output Tokens" 
        text={usage.outputTokens.toLocaleString()} 
      />
      <Detail.Metadata.Label 
        title="Total Cost" 
        text={`$${usage.cost.toFixed(4)}`} 
      />
    </Detail.Metadata>
  );
}
```

## Performance Optimization

### Memoization
```typescript
// ‚úÖ –ú–µ–º–æ–∏–∑–∞—Ü–∏—è –¥–æ—Ä–æ–≥–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
const processedContent = useMemo(() => {
  if (!response) return "";
  return formatMarkdown(response);
}, [response]);

const actionPanel = useMemo(() => (
  <ActionPanel>
    <Action.CopyToClipboard content={response || ""} />
    <Action title="Regenerate" onAction={handleRegenerate} />
  </ActionPanel>
), [response, handleRegenerate]);
```

### Lazy Loading
```typescript
// ‚úÖ –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—è–∂–µ–ª—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const TokenAnalyzer = lazy(() => import('./TokenAnalyzer'));
const UsageStats = lazy(() => import('./UsageStats'));

function ConditionalComponents({ showStats }: { showStats: boolean }) {
  return (
    <Suspense fallback={<Detail isLoading={true} />}>
      {showStats && <UsageStats />}
    </Suspense>
  );
}
```

## Best Practices

### Component Design
- –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –Ω–∞–¥ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º
- –°–ª–µ–¥—É–π—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
- –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π—Ç–µ props drilling

### User Experience
- –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ keyboard navigation
- –†–µ–∞–ª–∏–∑—É–π—Ç–µ graceful error handling

### Performance
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–º–æ–∏–∑–∞—Ü–∏—é –¥–ª—è –¥–æ—Ä–æ–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- –û–∏—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ re-renders —Å useCallback/useMemo
- –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ lazy loading –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π—Ç–µ bundle size
